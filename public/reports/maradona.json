{
  "security_score": 30,
  "findings": [
    {
      "source": "unknown",
      "details": {
        "description": "Setting the proxy admin to the proxy's own address makes all admin ops unreachable. No external caller can have msg.sender == proxy.",
        "severity": "High",
        "final_conclusion": "Status: Confirmed",
        "contracts_involved": [
          "TransparentUpgradeableProxy",
          "ERC1967Upgrade"
        ]
      }
    },
    {
      "source": "unknown",
      "details": {
        "description": "Admin path enforces zero value for some selectors, but upgradeToAndCall intentionally accepts value. If the initializer does not move it, ETH can remain stuck at the proxy.",
        "severity": "Medium",
        "final_conclusion": "Status: Confirmed",
        "contracts_involved": [
          "TransparentUpgradeableProxy",
          "ERC1967Upgrade"
        ]
      }
    },
    {
      "source": "unknown",
      "details": {
        "description": "Transparent pattern blocks the admin from falling back to the implementation. If runtime roles are assigned to the admin, those ops become unreachable.",
        "severity": "Low",
        "final_conclusion": "Status: Confirmed",
        "contracts_involved": [
          "TransparentUpgradeableProxy"
        ]
      }
    },
    {
      "source": "unknown",
      "details": {
        "description": "ProxyAdmin assumes it is the proxy admin. If it is not, its calls are forwarded by the Transparent proxy to the implementation. This can cause unintended execution when selectors overlap.",
        "severity": "Medium",
        "final_conclusion": "Status: Confirmed",
        "contracts_involved": [
          "ProxyAdmin",
          "TransparentUpgradeableProxy"
        ]
      }
    },
    {
      "source": "unknown",
      "details": {
        "description": "If the implementation behind a Transparent proxy exposes UUPS upgradeTo/upgradeToAndCall and authorizes a different actor than the proxy admin, upgrades can bypass intended governance.",
        "severity": "High",
        "final_conclusion": "Status: Context-dependent",
        "contracts_involved": [
          "TransparentUpgradeableProxy",
          "ProxyAdmin",
          "ERC1967Upgrade",
          "draft-IERC1822"
        ]
      }
    },
    {
      "source": "unknown",
      "details": {
        "description": "Constructor calls into implementation via delegatecall before storing the admin. Any initializer relying on msg.sender or the admin value can misbehave.",
        "severity": "Medium",
        "final_conclusion": "Status: Confirmed",
        "contracts_involved": [
          "TransparentUpgradeableProxy",
          "ERC1967Proxy",
          "ERC1967Upgrade"
        ]
      }
    },
    {
      "source": "unknown",
      "details": {
        "description": "Because admin calls are handled inside the proxy, identical selectors in the implementation are unreachable by the admin via the proxy.",
        "severity": "Low",
        "final_conclusion": "Status: Confirmed",
        "contracts_involved": [
          "TransparentUpgradeableProxy"
        ]
      }
    },
    {
      "source": "unknown",
      "details": {
        "description": "UpgradeableBeacon owner can change the implementation for every BeaconProxy wired to it. Compromise of that owner compromises all dependents.",
        "severity": "High",
        "final_conclusion": "Status: Confirmed",
        "contracts_involved": [
          "UpgradeableBeacon",
          "BeaconProxy"
        ]
      }
    },
    {
      "source": "unknown",
      "details": {
        "description": "BeaconProxy delegates to whatever address the beacon returns at call time. OZ UpgradeableBeacon prevents upgrading to a non‑contract, but if the implementation self‑destructs later or a non‑OZ beacon is used, calls can revert or no‑op.",
        "severity": "Medium",
        "final_conclusion": "Status: Context-dependent",
        "contracts_involved": [
          "BeaconProxy",
          "UpgradeableBeacon",
          "IBeacon"
        ]
      }
    },
    {
      "source": "unknown",
      "details": {
        "description": "Initializer code runs via delegatecall during upgrade, with proxy storage and semantics. Incorrect assumptions about msg.sender or side effects can misconfigure roles or state.",
        "severity": "Medium",
        "final_conclusion": "Status: Confirmed",
        "contracts_involved": [
          "TransparentUpgradeableProxy",
          "ERC1967Upgrade"
        ]
      }
    },
    {
      "source": "unknown",
      "details": {
        "description": "This repository uses a version with the fix for the historic selector clash.",
        "severity": "Info",
        "final_conclusion": "Status: Not Applicable",
        "contracts_involved": [
          "TransparentUpgradeableProxy"
        ]
      }
    }
  ],
  "meta": {
    "project_root": "/app/projects/Maradona",
    "files": [
      "Address.sol",
      "BeaconProxy.sol",
      "Context.sol",
      "ERC1967Proxy.sol",
      "ERC1967Upgrade.sol",
      "IBeacon.sol",
      "IERC1967.sol",
      "Ownable.sol",
      "Proxy.sol",
      "ProxyAdmin.sol",
      "StorageSlot.sol",
      "TransparentUpgradeableProxy.sol",
      "UpgradeableBeacon.sol",
      "draft-IERC1822.sol"
    ]
  }
}